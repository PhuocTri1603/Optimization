import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy
import math
from scipy.optimize import minimize_scalar
from scipy.optimize import minimize

#Question2
EMP1 = pd.read_excel("D:\Study\RacRoi\EMP1\EMP1.xlsx")
Z = np.asmatrix(EMP1[EMP1.columns[2:8]].to_numpy())
print(len(Z))
print(len(Z[0]))

#Question3
print(~np.isnan(Z).any(axis=1))
z = np.array(Z)
Z=np.asmatrix(z[~np.isnan(z).any(axis=1)])

#Question4
Z[:,0]= np.log(Z[:,0])

#Question5a,b,c
Z7 = np.multiply(Z[:,2], Z[:,2])
Z8 = np.where(Z[:,5]==2,1,0)
Z9 = np.where(Z[:,5]==3,1,0)
Z = np.append(np.append((np.append(Z, Z7, axis=1)), Z8, axis=1),Z9, axis=1)

# #Question5d,e,f
Z[:,1]=np.where(Z[:,1]==2,0,Z[:,1])
Z= np.delete(Z, 6,axis=1)
Z= np.append(Z, np.full((len(Z),1),1),axis=1)

# =============================================================================
# #Question6
# mean = []
# for i in range(1,10):
#     mean.append([np.mean(Z[:i])])
#     
# std = []
# for i in range(1,10):
#     std.append([np.std(Z[:i])])
# =============================================================================
    
    
#Question7
Y = Z[:,0]
X = Z[:,1:]

#Question8
bOLS = np.dot(np.dot(np.linalg.inv(np.dot(np.transpose(X), X)),np.transpose(X)),Y)
e = np.subtract(Y, np.dot(X,bOLS))
ss = np.divide(np.dot(np.transpose(e), e),np.subtract(X.shape[0], X.shape[1]))
vcvOLS = ss.item(0)*np.linalg.inv(np.dot(np.transpose(X),X))
se = np.sqrt(np.diag(vcvOLS))

# Question9
def lmLL(b, X, Y):
    # b=np.matrix(b0).reshape(8,1)
    yhat = np.subtract(Y, np.dot(X,b).reshape(len(X),1))
    yt = np.transpose(yhat)
    c = np.dot(yt,yhat)
    sigma2 = np.divide(c, X.shape[0]-X.shape[1])
    lmLL1 = -1*X.shape[0]/2*np.log(2*np.pi*np.square(sigma2))  
    lmLL2 = np.divide(c, 2*sigma2)
    lmLL = lmLL1 - lmLL2
    lmLL = np.array(lmLL).flatten()
    return -lmLL

b0=np.matrix(np.zeros(X.shape[1])).reshape(X.shape[1],1)
b0=np.array(b0)
b0=b0.flatten()
print(b0.ndim)

res = minimize(lmLL,b0, args=(X,Y))

bML = res.x
vcvML = res.hess_inv
seML = np.sqrt(np.diag(np.matrix(vcvML)))
